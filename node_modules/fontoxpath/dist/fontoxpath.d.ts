
/**
 * Compare the specificity of two XPath expressions. This function will return -1 if the second XPath is more specific, 1 if the first one is more specific and 0 if they are equal in specificity.
 *
 * @example
 * compareSpecificity('self::a', 'self::a[@b]') === -1;
 * compareSpecificity('self::a', 'self::a and child::b') === -1;
 * compareSpecificity('self::*', 'self::a') === 1;
 * compareSpecificity('self::a', 'self::a') === 0;
 *
 * @param xpathStringA
 * @param xpathStringB
 */
export declare function compareSpecificity(xpathStringA: any, xpathStringB: any): -1 | 0 | 1;

export declare const domFacade: IDomFacade;

declare type DomFacadeWrapper = {
    domFacade: IDomFacade;
};

/**
 * Evaluates an XPath on the given contextItem. Returns the string result as if the XPath is wrapped in string(...).
 *
 * @param  updateScript The updateScript to execute. Supports XPath 3.1.
 * @param  contextItem  The initial context for the script.
 * @param  domFacade    The domFacade (or DomFacade like interface) for retrieving relations.
 * @param  variables    Extra variables (name to value). Values can be number, string, boolean, nodes or object literals and arrays.
 * @param  options      Extra options for evaluating this XPath.
 *
 * @return The query result and pending update list.
 */
export declare function evaluateUpdatingExpression(updateScript: string, contextItem?: any | null, domFacade?: IDomFacade | null, variables?: {
    [s: string]: any;
} | null, options?: UpdatingOptions | null): Promise<{
    pendingUpdateList: object[];
    xdmValue: any[];
}>;

/**
 * Evaluates an XPath on the given contextItem.
 * If the return type is ANY_TYPE, the returned value depends on the result of the XPath:
 *  * If the XPath evaluates to the empty sequence, an empty array is returned.
 *  * If the XPath evaluates to a singleton node, that node is returned.
 *  * If the XPath evaluates to a singleton value, that value is atomized and returned.
 *  * If the XPath evaluates to a sequence of nodes, those nodes are returned.
 *  * Else, the sequence is atomized and returned.
 *
 * @param  selector    - The selector to execute. Supports XPath 3.1.
 * @param  contextItem - The node from which to run the XPath.
 * @param  domFacade   - The domFacade (or DomFacade like interface) for retrieving relations.
 * @param  variables   - Extra variables (name to value). Values can be number, string, boolean, nodes or object literals and arrays.
 * @param  returnType  - One of the return types, indicates the expected type of the XPath query.
 * @param  options     - Extra options for evaluating this XPath
 */
export declare function evaluateXPath(selector: string, contextItem?: any | null, domFacade?: IDomFacade | null, variables?: {
    [s: string]: any;
} | null, returnType?: ReturnType | null, options?: Options | null): Node[] | Node | any[] | any;

export declare namespace evaluateXPath {
    var ANY_TYPE: ReturnType;
    var NUMBER_TYPE: ReturnType;
    var STRING_TYPE: ReturnType;
    var BOOLEAN_TYPE: ReturnType;
    var NODES_TYPE: ReturnType;
    var FIRST_NODE_TYPE: ReturnType;
    var STRINGS_TYPE: ReturnType;
    var MAP_TYPE: ReturnType;
    var ARRAY_TYPE: ReturnType;
    var ASYNC_ITERATOR_TYPE: ReturnType;
    var NUMBERS_TYPE: ReturnType;
    var XQUERY_3_1_LANGUAGE: Language;
    var XPATH_3_1_LANGUAGE: Language;
}

/**
 * Evaluates an XPath on the given contextNode. Returns the result as an array, if the result is an XPath array.
 *
 * @param  selector    - The selector to execute. Supports XPath 3.1.
 * @param  contextItem - The node from which to run the XPath.
 * @param  domFacade   - The domFacade (or DomFacade like interface) for retrieving relations.
 * @param  variables   - Extra variables (name to value). Values can be number, string, boolean, nodes or object literals and arrays.
 * @param  options     - Extra options for evaluating this XPath.
 *
 * @return The array result, as a JavaScript array with atomized values.
 */
export declare function evaluateXPathToArray(selector: string, contextItem?: any | null, domFacade?: IDomFacade | null, variables?: {
    [s: string]: any;
} | null, options?: Options | null): any[];

/**
 * Evaluates an XPath on the given contextNode. Returns the result as an async iterator
 *
 * @param  selector    - The selector to execute. Supports XPath 3.1.
 * @param  contextItem - The node from which to run the XPath.
 * @param  domFacade   - The domFacade (or DomFacade like interface) for retrieving relations.
 * @param  variables   - Extra variables (name to value). Values can be number, string, boolean, nodes or object literals and arrays.
 * @param  options     - Extra options for evaluating this XPath.
 *
 * @return An async iterator to the return values.
 */
export declare function evaluateXPathToAsyncIterator(selector: string, contextItem?: any | null, domFacade?: IDomFacade | null, variables?: {
    [s: string]: any;
} | null, options?: Options | null): AsyncIterator<any>;

/**
 * Evaluates an XPath on the given contextNode.
 *
 * @param  selector    - The selector to execute. Supports XPath 3.1.
 * @param  contextItem - The node from which to run the XPath.
 * @param  domFacade   - The domFacade (or DomFacade like interface) for retrieving relations.
 * @param  variables   - Extra variables (name to value). Values can be number, string, boolean, nodes or object literals and arrays.
 * @param  options     - Extra options for evaluating this XPath.
 */
export declare function evaluateXPathToBoolean(selector: string, contextItem?: any | null, domFacade?: IDomFacade | null, variables?: {
    [s: string]: any;
} | null, options?: Options | null): boolean;

/**
 * Evaluates an XPath on the given contextNode. Returns the first node result.
 *
 * @param  selector    - The selector to execute. Supports XPath 3.1.
 * @param  contextItem - The node from which to run the XPath.
 * @param  domFacade   - The domFacade (or DomFacade like interface) for retrieving relations.
 * @param  variables   - Extra variables (name to value). Values can be number, string, boolean, nodes or object literals and arrays.
 * @param  options     - Extra options for evaluating this XPath.
 *
 * @return The first matching node, in the order defined by the XPath.
 */
export declare function evaluateXPathToFirstNode(selector: string, contextItem?: any | null, domFacade?: IDomFacade | null, variables?: {
    [s: string]: any;
} | null, options?: Options | null): Node | null;

/**
 * Evaluates an XPath on the given contextNode. Returns the result as a map, if the result is an XPath map.
 *
 * @param  selector    - The selector to execute. Supports XPath 3.1.
 * @param  contextItem - The node from which to run the XPath.
 * @param  domFacade   - The domFacade (or DomFacade like interface) for retrieving relations.
 * @param  variables   - Extra variables (name to value). Values can be number, string, boolean, nodes or object literals and arrays.
 * @param  options     - Extra options for evaluating this XPath.
 *
 * @return The map result, as an object. Because of JavaScript
 * constraints, key 1 and '1' are the same. The values in this map are
 * the JavaScript simple types. See evaluateXPath for more details in
 * mapping types.
 */
export declare function evaluateXPathToMap(selector: string, contextItem?: any | null, domFacade?: IDomFacade | null, variables?: {
    [s: string]: any;
} | null, options?: Options | null): {
    [s: string]: any;
};

/**
 * Evaluates an XPath on the given contextNode. Returns the first node result.
 * Returns result in the order defined in the XPath. The path operator ('/'), the union operator ('union' and '|') will sort.
 * This implies (//A, //B) resolves to all A nodes, followed by all B nodes, both in document order, but not merged.
 * However: (//A | //B) resolves to all A and B nodes in document order.
 *
 * @param  selector    - The selector to execute. Supports XPath 3.1.
 * @param  contextItem - The node from which to run the XPath.
 * @param  domFacade   - The domFacade (or DomFacade like interface) for retrieving relations.
 * @param  variables   - Extra variables (name to value). Values can be number, string, boolean, nodes or object literals and arrays.
 * @param  options     - Extra options for evaluating this XPath.
 *
 * @return All matching Nodes, in the order defined by the XPath.
 */
export declare function evaluateXPathToNodes(selector: string, contextItem?: any | null, domFacade?: IDomFacade | null, variables?: {
    [s: string]: any;
} | null, options?: Options | null): Node[];

/**
 * Evaluates an XPath on the given contextNode. Returns the numeric result.
 *
 * @param  selector    - The selector to execute. Supports XPath 3.1.
 * @param  contextItem - The node from which to run the XPath.
 * @param  domFacade   - The domFacade (or DomFacade like interface) for retrieving relations.
 * @param  variables   - Extra variables (name to value). Values can be number, string, boolean, nodes or object literals and arrays.
 * @param  options     - Extra options for evaluating this XPath.
 *
 * @return The numerical result.
 */
export declare function evaluateXPathToNumber(selector: string, contextItem?: any | null, domFacade?: IDomFacade | null, variables?: {
    [s: string]: any;
} | null, options?: Options | null): number;

/**
 * Evaluates an XPath on the given contextNode. Returns the numeric result.
 *
 * @param  selector    - The selector to execute. Supports XPath 3.1.
 * @param  contextItem - The node from which to run the XPath.
 * @param  domFacade   - The domFacade (or DomFacade like interface) for retrieving relations.
 * @param  variables   - Extra variables (name to value). Values can be number, string, boolean, nodes or object literals and arrays.
 * @param  options     - Extra options for evaluating this XPath.
 *
 * @return The numerical results.
 */
export declare function evaluateXPathToNumbers(selector: string, contextItem?: any | null, domFacade?: IDomFacade | null, variables?: {
    [s: string]: any;
} | null, options?: Options | null): number[];

/**
 * Evaluates an XPath on the given contextNode. Returns the string result as if the XPath is wrapped in string(...).
 *
 * @param  selector    - The selector to execute. Supports XPath 3.1.
 * @param  contextItem - The node from which to run the XPath.
 * @param  domFacade   - The domFacade (or DomFacade like interface) for retrieving relations.
 * @param  variables   - Extra variables (name to value). Values can be number, string, boolean, nodes or object literals and arrays.
 * @param  options     - Extra options for evaluating this XPath.
 *
 * @return The string result.
 */
export declare function evaluateXPathToString(selector: string, contextItem?: any | null, domFacade?: IDomFacade | null, variables?: {
    [s: string]: any;
} | null, options?: Options | null): string;

/**
 * Evaluates an XPath on the given contextNode. Returns the string result as if the XPath is wrapped in string(...).
 *
 * @param  selector    - The selector to execute. Supports XPath 3.1.
 * @param  contextItem - The node from which to run the XPath.
 * @param  domFacade   - The domFacade (or DomFacade like interface) for retrieving relations.
 * @param  variables   - Extra variables (name to value). Values can be number, string, boolean, nodes or object literals and arrays.
 * @param  options     - Extra options for evaluating this XPath.
 *
 * @return The string result.
 */
export declare function evaluateXPathToStrings(selector: string, contextItem?: any | null, domFacade?: IDomFacade | null, variables?: {
    [s: string]: any;
} | null, options?: Options | null): string[];

/**
 * Evaluates an XPath on the given contextItem. Returns the string result as if the XPath is wrapped in string(...).
 *
 * @param  pendingUpdateList - The updateScript to execute.
 * @param  domFacade         - The domFacade (or DomFacade like interface) for retrieving relations.
 * @param  nodesFactory      - The nodesFactory for creating nodes.
 * @param  documentWriter    - The documentWriter for writing changes.
 */
export declare function executePendingUpdateList(pendingUpdateList: object[], domFacade?: IDomFacade, nodesFactory?: INodesFactory, documentWriter?: IDocumentWriter): void;

/**
 *
 * @param xpathString The XPath for which a buckets hould be retrieved
 */
export declare function getBucketForSelector(xpathString: any): string;

/**
 * Get the buckets that apply to a given node.
 *
 * Buckets can be used to pre-filter XPath expressions to exclude those that will never match the given node.
 *
 * The bucket for a selector can be retrieved using {@link getBucketForSelector}.
 *
 * @param node - The node which buckets should be retrieved
 */
export declare function getBucketsForNode(node: Node): string[];

declare interface IDocumentWriter {
    insertBefore(parent: Element | Document, newNode: Node, referenceNode: Node | null): void;
    removeAttributeNS(node: Element, namespace: string, name: string): void;
    removeChild(parent: Element | Document, child: Node): void;
    setAttributeNS(node: Element, namespace: string, name: string, value: string): void;
    setData(node: Node, data: string): void;
}

export declare interface IDomFacade {
    getAllAttributes(node: Element): Attr[];
    getAttribute(node: Element, attributeName: string): string | null;
    getChildNodes(node: Node): Node[];
    getData(node: Attr | CharacterData): string;
    getFirstChild(node: Node): Node | null;
    getLastChild(node: Node): Node | null;
    getNextSibling(node: Node): Node | null;
    getParentNode(node: Node): Node | null;
    getPreviousSibling(node: Node): Node | null;
}

declare interface INodesFactory {
    createAttributeNS(namespaceURI: string, name: string): Attr;
    createComment(contents: string): Comment;
    createElementNS(namespaceURI: string, name: string): Element;
    createProcessingInstruction(target: string, data: string): ProcessingInstruction;
    createTextNode(contents: string): Text;
}

declare enum Language {
    XPATH_3_1_LANGUAGE = "XPath3.1",
    XQUERY_3_1_LANGUAGE = "XQuery3.1"
}

declare type Options = {
    debug?: boolean;
    language?: Language;
    moduleImports?: {
        [s: string]: string;
    };
    namespaceResolver?: (s: string) => string | null;
    nodesFactory?: INodesFactory;
};

/**
 * Precompile an XPath selector asynchronously.
 *
 * This code is deprecated. This is a no-op!
 *
 * @param   xPathString  The xPath which should be pre-compiled
 *
 * @return  A promise which is resolved with the xpath string after compilation.
 */
export declare function precompileXPath(xPathString: string): Promise<string>;

/**
 * Add a custom test for use in xpath-serialized expressions.
 *
 * @param  name        The name of this custom function. The string overload is deprecated, please register functions using the object overload
 * @param  signature   The signature of the test, as array of strings (e.g. ['item()', 'node()?', 'xs:numeric'])
 * @param  returnType  The return type of the test, as sequence type (e.g. 'xs:boolean()')
 * @param  callback    The test itself, which gets the dynamicContext and arguments passed
 */
export declare function registerCustomXPathFunction(name: string | {
    localName: string;
    namespaceURI: string;
}, signature: string[], returnType: string, callback: (domFacade: DomFacadeWrapper, ...functionArgs: any[]) => any): void;

/**
 * @param   moduleString
 * @return  The namespace uri of the new module
 */
export declare function registerXQueryModule(moduleString: string): string;

declare enum ReturnType {
    ANY = 0,
    NUMBER = 1,
    STRING = 2,
    BOOLEAN = 3,
    NODES = 7,
    FIST_NODE = 9,
    STRINGS = 10,
    MAP = 11,
    ARRAY = 12,
    NUMBERS = 13,
    ASYNC_ITERATOR = 99
}

declare type UpdatingOptions = {
    debug?: boolean;
    documentWriter?: IDocumentWriter;
    moduleImports?: {
        [s: string]: string;
    };
    namespaceResolver?: (s: string) => string | null;
    nodesFactory?: INodesFactory;
};

export { }
